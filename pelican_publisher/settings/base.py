"""
Django settings for pelican_publisher project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import json
from os import getenv
from pathlib import Path
from uuid import uuid4

from pelican_publisher import __version__
from pelican_publisher.sentry import init_sentry

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = uuid4().hex

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    # "django.contrib.admin",
    # "django.contrib.auth",
    # "django.contrib.contenttypes",
    # "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_toosimple_q",
    "tailwind",
    "pp_core",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    # "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pelican_publisher.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                # "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pelican_publisher.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR.joinpath("db.sqlite3"),
    }
}

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR.joinpath("staticfiles")

# Pelican Publisher
PELICAN_PUBLISHER = {
    "WORKING_ROOT": "/tmp",
    "OUTPUT_ROOT": "/tmp",
}

PELICAN_SITES = [
    {
        "NAME": "rexzhang.com",
        "TYPE": "GITHUB",
        "ZIP_URL": "https://github.com/rexzhang/rexzhang.com/archive/master.zip",
        "WEBHOOK_SECRET": "please-change-it-!",
    },
]

# Sentry
SENTRY_DSN = getenv("SENTRY_DSN", "")
if SENTRY_DSN:
    from sentry_sdk.integrations.asyncio import AsyncioIntegration
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.logging import LoggingIntegration

    init_sentry(
        dsn=SENTRY_DSN,
        integrations=[AsyncioIntegration(), DjangoIntegration(), LoggingIntegration()],
        app_name="PelicanPublisher",
        app_version=__version__,
        user_id_is_mac_address=True,
    )

# Parse Env
env_data = getenv("PELICAN_PUBLISHER_DOMAIN", "")
if len(env_data) > 0:
    ALLOWED_HOSTS.append(env_data)

env_data = getenv("PELICAN_PUBLISHER_PREFIX", "")
if len(env_data) > 0:
    env_data = f"{env_data.rstrip(" / ").strip('/')}/"
PELICAN_PUBLISHER_PREFIX = env_data

env_data = getenv("PELICAN_SITES", "")
if env_data != "":
    try:
        pelican_sites = json.loads(env_data)
        for pelican_site_info in pelican_sites:
            if set(pelican_site_info.keys()) < {"NAME", "ZIP_URL", "WEBHOOK_SECRET"}:
                raise ValueError

        PELICAN_SITES = pelican_sites

    except ValueError:
        raise Exception("env PELICAN_SITES incorrect")

SENTRY_DSN = getenv("SENTRY_DSN", "")
